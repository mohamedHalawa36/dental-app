

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


CREATE EXTENSION IF NOT EXISTS "pgsodium";






COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";






CREATE TYPE "public"."user_role" AS ENUM (
    'doctor',
    'nurse'
);


ALTER TYPE "public"."user_role" OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."Users" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" "text" DEFAULT ''::"text" NOT NULL,
    "email" "text" DEFAULT ''::"text" NOT NULL,
    "is_admin" boolean DEFAULT false NOT NULL,
    "phone" character varying DEFAULT ''::character varying NOT NULL
);


ALTER TABLE "public"."Users" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."appointments" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user_id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "date" "date" NOT NULL,
    "time" time without time zone,
    "patient_id" "uuid" NOT NULL,
    "doctor_id" "uuid" NOT NULL,
    CONSTRAINT "chk_no_past_date" CHECK (("date" >= CURRENT_DATE))
);


ALTER TABLE "public"."appointments" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."doctor_availability" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "doctor_id" "uuid" NOT NULL,
    "day" "text" DEFAULT ''::"text" NOT NULL,
    "start_time" time without time zone NOT NULL,
    "end_time" time without time zone NOT NULL,
    "user_id" "uuid" DEFAULT "auth"."uid"() NOT NULL
);


ALTER TABLE "public"."doctor_availability" OWNER TO "postgres";


ALTER TABLE "public"."doctor_availability" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."doctor_availability_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."patients" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" "text" DEFAULT ''::"text" NOT NULL,
    "phone" character varying NOT NULL,
    "phone_has_whatsapp" boolean NOT NULL,
    "age" numeric NOT NULL,
    "address" "text" NOT NULL,
    "user_id" "uuid" DEFAULT "auth"."uid"() NOT NULL
);


ALTER TABLE "public"."patients" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."profiles" (
    "id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "role" "public"."user_role" DEFAULT 'nurse'::"public"."user_role" NOT NULL,
    "is_admin" boolean DEFAULT false NOT NULL,
    "name" "text" DEFAULT ''::"text" NOT NULL,
    "email" "text" NOT NULL,
    "is_active" boolean DEFAULT true NOT NULL,
    "has_reseted_password" boolean DEFAULT false NOT NULL,
    "user_id" "uuid" DEFAULT "auth"."uid"() NOT NULL
);


ALTER TABLE "public"."profiles" OWNER TO "postgres";


ALTER TABLE ONLY "public"."appointments"
    ADD CONSTRAINT "Appointments_sup_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."patients"
    ADD CONSTRAINT "Patients_sup_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "Profiles_2_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."Users"
    ADD CONSTRAINT "Users_sup_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."doctor_availability"
    ADD CONSTRAINT "doctor_availability_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."appointments"
    ADD CONSTRAINT "unique_day_time" UNIQUE ("date", "time");



ALTER TABLE ONLY "public"."appointments"
    ADD CONSTRAINT "unique_patient_appointment_per_day" UNIQUE ("patient_id", "date");



ALTER TABLE ONLY "public"."appointments"
    ADD CONSTRAINT "Appointments_doctor_id_fkey" FOREIGN KEY ("doctor_id") REFERENCES "public"."profiles"("id") ON UPDATE RESTRICT ON DELETE RESTRICT;



ALTER TABLE ONLY "public"."appointments"
    ADD CONSTRAINT "Appointments_sup_patient_id_fkey" FOREIGN KEY ("patient_id") REFERENCES "public"."patients"("id") ON UPDATE CASCADE ON DELETE RESTRICT;



ALTER TABLE ONLY "public"."doctor_availability"
    ADD CONSTRAINT "doctor_availability_doctor_id_fkey" FOREIGN KEY ("doctor_id") REFERENCES "public"."profiles"("id") ON UPDATE CASCADE ON DELETE CASCADE;



CREATE POLICY "Do all for Auth users" ON "public"."patients" TO "authenticated" USING ((EXISTS ( SELECT 1
   FROM "public"."profiles"
  WHERE (("profiles"."id" = "auth"."uid"()) AND ("profiles"."is_active" = true)))));



CREATE POLICY "Do all for auth" ON "public"."profiles" USING (true);



CREATE POLICY "Do not add appointment before today" ON "public"."appointments" FOR INSERT TO "authenticated" WITH CHECK (("date" >= CURRENT_DATE));



CREATE POLICY "Doctors can delete thier appointments only" ON "public"."appointments" AS RESTRICTIVE FOR DELETE TO "authenticated" USING ((EXISTS ( SELECT 1
   FROM "public"."profiles"
  WHERE (("profiles"."id" = "auth"."uid"()) AND (("profiles"."is_admin" = true) OR (("profiles"."role" = 'doctor'::"public"."user_role") AND ("profiles"."is_admin" = false) AND ("appointments"."doctor_id" = "auth"."uid"())) OR (("profiles"."role" <> 'doctor'::"public"."user_role") AND ("profiles"."is_admin" = false)))))));



CREATE POLICY "Doctors can only delete the patients they created" ON "public"."patients" AS RESTRICTIVE FOR DELETE USING ((EXISTS ( SELECT 1
   FROM "public"."profiles"
  WHERE (("profiles"."id" = "auth"."uid"()) AND (("profiles"."is_admin" = true) OR (("profiles"."role" = 'doctor'::"public"."user_role") AND ("profiles"."is_admin" = false) AND ("patients"."user_id" = "auth"."uid"())) OR (("profiles"."role" <> 'doctor'::"public"."user_role") AND ("profiles"."is_admin" = false)))))));



CREATE POLICY "Doctors can only update the patients they added" ON "public"."patients" AS RESTRICTIVE FOR UPDATE TO "authenticated" USING ((EXISTS ( SELECT 1
   FROM "public"."profiles"
  WHERE (("profiles"."id" = "auth"."uid"()) AND (("profiles"."is_admin" = true) OR (("profiles"."role" = 'doctor'::"public"."user_role") AND ("profiles"."is_admin" = false) AND ("patients"."user_id" = "auth"."uid"())) OR (("profiles"."role" <> 'doctor'::"public"."user_role") AND ("profiles"."is_admin" = false))))))) WITH CHECK ((EXISTS ( SELECT 1
   FROM "public"."profiles"
  WHERE (("profiles"."id" = "auth"."uid"()) AND (("profiles"."is_admin" = true) OR (("profiles"."role" = 'doctor'::"public"."user_role") AND ("profiles"."is_admin" = false) AND ("patients"."user_id" = "auth"."uid"())) OR (("profiles"."role" <> 'doctor'::"public"."user_role") AND ("profiles"."is_admin" = false)))))));



CREATE POLICY "Doctors can only update thier appointments" ON "public"."appointments" AS RESTRICTIVE FOR UPDATE TO "authenticated" USING ((EXISTS ( SELECT 1
   FROM "public"."profiles"
  WHERE (("profiles"."id" = "auth"."uid"()) AND (("profiles"."is_admin" = true) OR (("profiles"."role" = 'doctor'::"public"."user_role") AND ("profiles"."is_admin" = false) AND ("appointments"."doctor_id" = "auth"."uid"())) OR (("profiles"."role" <> 'doctor'::"public"."user_role") AND ("profiles"."is_admin" = false))))))) WITH CHECK ((EXISTS ( SELECT 1
   FROM "public"."profiles"
  WHERE (("profiles"."id" = "auth"."uid"()) AND (("profiles"."is_admin" = true) OR (("profiles"."role" = 'doctor'::"public"."user_role") AND ("profiles"."is_admin" = false) AND ("appointments"."doctor_id" = "auth"."uid"())) OR (("profiles"."role" <> 'doctor'::"public"."user_role") AND ("profiles"."is_admin" = false)))))));



ALTER TABLE "public"."Users" ENABLE ROW LEVEL SECURITY;


CREATE POLICY "anything" ON "public"."profiles" USING (true);



ALTER TABLE "public"."appointments" ENABLE ROW LEVEL SECURITY;


CREATE POLICY "do All for Auth" ON "public"."doctor_availability" TO "authenticated" USING ((EXISTS ( SELECT 1
   FROM "public"."profiles"
  WHERE (("profiles"."id" = "auth"."uid"()) AND ("profiles"."is_active" = true)))));



CREATE POLICY "do all for auth" ON "public"."appointments" TO "authenticated" USING ((("date" >= CURRENT_DATE) AND (EXISTS ( SELECT 1
   FROM "public"."profiles"
  WHERE (("profiles"."id" = "auth"."uid"()) AND ("profiles"."is_active" = true))))));



ALTER TABLE "public"."doctor_availability" ENABLE ROW LEVEL SECURITY;


CREATE POLICY "doctors can only see thier appointments" ON "public"."appointments" AS RESTRICTIVE FOR SELECT TO "authenticated" USING ((EXISTS ( SELECT 1
   FROM "public"."profiles"
  WHERE (("profiles"."id" = "auth"."uid"()) AND (("profiles"."role" = 'nurse'::"public"."user_role") OR (("profiles"."role" = 'doctor'::"public"."user_role") AND ("appointments"."doctor_id" = "auth"."uid"())))))));



ALTER TABLE "public"."patients" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."profiles" ENABLE ROW LEVEL SECURITY;




ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";


GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";



































































































































































































GRANT ALL ON TABLE "public"."Users" TO "anon";
GRANT ALL ON TABLE "public"."Users" TO "authenticated";
GRANT ALL ON TABLE "public"."Users" TO "service_role";



GRANT ALL ON TABLE "public"."appointments" TO "anon";
GRANT ALL ON TABLE "public"."appointments" TO "authenticated";
GRANT ALL ON TABLE "public"."appointments" TO "service_role";



GRANT ALL ON TABLE "public"."doctor_availability" TO "anon";
GRANT ALL ON TABLE "public"."doctor_availability" TO "authenticated";
GRANT ALL ON TABLE "public"."doctor_availability" TO "service_role";



GRANT ALL ON SEQUENCE "public"."doctor_availability_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."doctor_availability_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."doctor_availability_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."patients" TO "anon";
GRANT ALL ON TABLE "public"."patients" TO "authenticated";
GRANT ALL ON TABLE "public"."patients" TO "service_role";



GRANT ALL ON TABLE "public"."profiles" TO "anon";
GRANT ALL ON TABLE "public"."profiles" TO "authenticated";
GRANT ALL ON TABLE "public"."profiles" TO "service_role";



ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";






























RESET ALL;

